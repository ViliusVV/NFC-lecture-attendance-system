// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NFCSystem.Data;

namespace NFCSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190425185757_Mig3")]
    partial class Mig3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "STUDENT",
                            ConcurrencyStamp = "2f6a805b-61aa-4344-98b9-a6ce12079951",
                            Name = "STUDENT",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "ADMIN",
                            ConcurrencyStamp = "8f1ea878-efe2-4a5e-b77e-36d1c037b1f4",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "LECTURER",
                            ConcurrencyStamp = "9c55b54d-9658-4b1a-94d2-f07cfc0884f3",
                            Name = "LECTURER",
                            NormalizedName = "LECTURER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(127);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(127);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(127);

                    b.Property<string>("RoleId")
                        .HasMaxLength(127);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(127);

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(127);

                    b.Property<string>("Name")
                        .HasMaxLength(127);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NFCSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Group");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StudentCode");

                    b.Property<string>("Surname");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<long>("UID");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc865da9-bd62-4a69-b582-7180e7a4c8a8",
                            Email = "vardenis.pavardenis@email.com",
                            EmailConfirmed = false,
                            Group = "IFF-6/9",
                            LockoutEnabled = false,
                            Name = "Vardenis",
                            NormalizedEmail = "VARDENIS.PAVARDENIS@EMAIL.COM",
                            NormalizedUserName = "VARVAV",
                            PasswordHash = "AQAAAAEAACcQAAAAEB6C1+58Xu39M0aQhRD1Kohn5rYmk4G5x2Y2iv5PoBjSl2p6W0cu6DiTMZYVe2yBKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2cbd3bfa-9b86-481d-8ffa-356f175a0560",
                            StudentCode = "C0000",
                            Surname = "Pavardenis",
                            TwoFactorEnabled = false,
                            UID = 25554654L,
                            UserName = "varvav"
                        });
                });

            modelBuilder.Entity("NFCSystem.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(9999);

                    b.Property<int>("DeviceIdReal");

                    b.HasKey("DeviceId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            DeviceId = 1,
                            ClassroomId = 3,
                            DeviceIdReal = 1
                        },
                        new
                        {
                            DeviceId = 2,
                            ClassroomId = 5,
                            DeviceIdReal = 2
                        },
                        new
                        {
                            DeviceId = 3,
                            ClassroomId = 13,
                            DeviceIdReal = 3
                        },
                        new
                        {
                            DeviceId = 4,
                            ClassroomId = 9999,
                            DeviceIdReal = 4
                        },
                        new
                        {
                            DeviceId = 5,
                            ClassroomId = 9999,
                            DeviceIdReal = 5
                        },
                        new
                        {
                            DeviceId = 6,
                            ClassroomId = 9999,
                            DeviceIdReal = 6
                        });
                });

            modelBuilder.Entity("NFCSystem.Models.NFCScan", b =>
                {
                    b.Property<long>("ScanID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DeviceID");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<long>("UID");

                    b.HasKey("ScanID");

                    b.ToTable("NFCScans");
                });

            modelBuilder.Entity("NFCSystem.Models.Timetable.Classroom", b =>
                {
                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassLabel");

                    b.Property<string>("ClassLocation");

                    b.HasKey("ClassroomId");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            ClassroomId = 9999,
                            ClassLabel = "DummmyClassroom",
                            ClassLocation = "Moon, in a far galaxy away"
                        },
                        new
                        {
                            ClassroomId = 1,
                            ClassLabel = "101",
                            ClassLocation = "XI"
                        },
                        new
                        {
                            ClassroomId = 2,
                            ClassLabel = "102",
                            ClassLocation = "XI"
                        },
                        new
                        {
                            ClassroomId = 3,
                            ClassLabel = "103",
                            ClassLocation = "XI"
                        },
                        new
                        {
                            ClassroomId = 4,
                            ClassLabel = "518",
                            ClassLocation = "XI"
                        },
                        new
                        {
                            ClassroomId = 5,
                            ClassLabel = "215",
                            ClassLocation = "XI"
                        },
                        new
                        {
                            ClassroomId = 6,
                            ClassLabel = "150",
                            ClassLocation = "XII"
                        },
                        new
                        {
                            ClassroomId = 7,
                            ClassLabel = "151",
                            ClassLocation = "XII"
                        },
                        new
                        {
                            ClassroomId = 9,
                            ClassLabel = "152",
                            ClassLocation = "XII"
                        },
                        new
                        {
                            ClassroomId = 10,
                            ClassLabel = "153",
                            ClassLocation = "XII"
                        },
                        new
                        {
                            ClassroomId = 11,
                            ClassLabel = "103AB",
                            ClassLocation = "IX"
                        },
                        new
                        {
                            ClassroomId = 12,
                            ClassLabel = "103CD",
                            ClassLocation = "IX"
                        },
                        new
                        {
                            ClassroomId = 13,
                            ClassLabel = "103KL",
                            ClassLocation = "IX"
                        },
                        new
                        {
                            ClassroomId = 14,
                            ClassLabel = "108",
                            ClassLocation = "B2"
                        });
                });

            modelBuilder.Entity("NFCSystem.Models.Timetable.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseName");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = "PB0000",
                            CourseName = "Algoritmų analizė ir sudarymas"
                        },
                        new
                        {
                            CourseId = "PB0001",
                            CourseName = "Duomenų bazės"
                        },
                        new
                        {
                            CourseId = "PB0002",
                            CourseName = "Semestro projektas"
                        },
                        new
                        {
                            CourseId = "PB0003",
                            CourseName = "Programų sistemų inžinerija"
                        },
                        new
                        {
                            CourseId = "PB0004",
                            CourseName = "Programavimo kalbų teorija"
                        },
                        new
                        {
                            CourseId = "PB0005",
                            CourseName = "Anglų kalba"
                        });
                });

            modelBuilder.Entity("NFCSystem.Models.Timetable.Period", b =>
                {
                    b.Property<int>("PeriodId")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("PeriodEndTime");

                    b.Property<TimeSpan>("PeriodStartTime");

                    b.HasKey("PeriodId");

                    b.ToTable("Periods");

                    b.HasData(
                        new
                        {
                            PeriodId = 1,
                            PeriodEndTime = new TimeSpan(0, 10, 30, 0, 0),
                            PeriodStartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            PeriodId = 2,
                            PeriodEndTime = new TimeSpan(0, 12, 30, 0, 0),
                            PeriodStartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            PeriodId = 3,
                            PeriodEndTime = new TimeSpan(0, 15, 0, 0, 0),
                            PeriodStartTime = new TimeSpan(0, 13, 30, 0, 0)
                        },
                        new
                        {
                            PeriodId = 4,
                            PeriodEndTime = new TimeSpan(0, 17, 0, 0, 0),
                            PeriodStartTime = new TimeSpan(0, 15, 30, 0, 0)
                        },
                        new
                        {
                            PeriodId = 5,
                            PeriodEndTime = new TimeSpan(0, 19, 0, 0, 0),
                            PeriodStartTime = new TimeSpan(0, 17, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NFCSystem.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NFCSystem.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NFCSystem.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NFCSystem.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NFCSystem.Models.Device", b =>
                {
                    b.HasOne("NFCSystem.Models.Timetable.Classroom", "Classroom")
                        .WithMany("Devices")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
