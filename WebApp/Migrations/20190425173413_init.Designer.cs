// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NFCSystem.Data;

namespace NFCSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190425173413_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "STUDENT",
                            ConcurrencyStamp = "3a9e380e-f1dc-445c-a758-cdb71cedcaad",
                            Name = "STUDENT",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "ADMIN",
                            ConcurrencyStamp = "b995146c-2f95-4102-a34e-84925468e391",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "LECTURER",
                            ConcurrencyStamp = "735897fe-eca2-47ba-a7f6-8bd2ce752f7c",
                            Name = "LECTURER",
                            NormalizedName = "LECTURER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(127);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(127);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(127);

                    b.Property<string>("RoleId")
                        .HasMaxLength(127);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(127);

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(127);

                    b.Property<string>("Name")
                        .HasMaxLength(127);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NFCSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Group");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StudentCode");

                    b.Property<string>("Surname");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<long>("UID");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NFCSystem.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassroomId");

                    b.Property<int>("DeviceIdReal");

                    b.HasKey("DeviceId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("NFCSystem.Models.NFCScan", b =>
                {
                    b.Property<long>("ScanID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DeviceID");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<long>("UID");

                    b.HasKey("ScanID");

                    b.ToTable("NFCScans");
                });

            modelBuilder.Entity("NFCSystem.Models.Timetable.Classroom", b =>
                {
                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassLabel");

                    b.Property<string>("ClassLocation");

                    b.HasKey("ClassroomId");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            ClassroomId = 9999,
                            ClassLabel = "DummmyClassroom",
                            ClassLocation = "Moon, in a far galaxy away"
                        },
                        new
                        {
                            ClassroomId = 1,
                            ClassLabel = "101",
                            ClassLocation = "XI"
                        },
                        new
                        {
                            ClassroomId = 2,
                            ClassLabel = "102",
                            ClassLocation = "XI"
                        },
                        new
                        {
                            ClassroomId = 3,
                            ClassLabel = "103",
                            ClassLocation = "XI"
                        },
                        new
                        {
                            ClassroomId = 4,
                            ClassLabel = "518",
                            ClassLocation = "XI"
                        },
                        new
                        {
                            ClassroomId = 5,
                            ClassLabel = "215",
                            ClassLocation = "XI"
                        },
                        new
                        {
                            ClassroomId = 6,
                            ClassLabel = "150",
                            ClassLocation = "XII"
                        },
                        new
                        {
                            ClassroomId = 7,
                            ClassLabel = "151",
                            ClassLocation = "XII"
                        },
                        new
                        {
                            ClassroomId = 9,
                            ClassLabel = "152",
                            ClassLocation = "XII"
                        },
                        new
                        {
                            ClassroomId = 10,
                            ClassLabel = "153",
                            ClassLocation = "XII"
                        },
                        new
                        {
                            ClassroomId = 11,
                            ClassLabel = "103AB",
                            ClassLocation = "IX"
                        },
                        new
                        {
                            ClassroomId = 12,
                            ClassLabel = "103CD",
                            ClassLocation = "IX"
                        },
                        new
                        {
                            ClassroomId = 13,
                            ClassLabel = "103KL",
                            ClassLocation = "IX"
                        },
                        new
                        {
                            ClassroomId = 14,
                            ClassLabel = "108",
                            ClassLocation = "B2"
                        });
                });

            modelBuilder.Entity("NFCSystem.Models.Timetable.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseName");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = "PB0000",
                            CourseName = "Algoritmų analizė ir sudarymas"
                        },
                        new
                        {
                            CourseId = "PB0001",
                            CourseName = "Duomenų bazės"
                        },
                        new
                        {
                            CourseId = "PB0002",
                            CourseName = "Semestro projektas"
                        },
                        new
                        {
                            CourseId = "PB0003",
                            CourseName = "Programų sistemų inžinerija"
                        },
                        new
                        {
                            CourseId = "PB0004",
                            CourseName = "Programavimo kalbų teorija"
                        },
                        new
                        {
                            CourseId = "PB0005",
                            CourseName = "Anglų kalba"
                        });
                });

            modelBuilder.Entity("NFCSystem.Models.Timetable.Period", b =>
                {
                    b.Property<int>("PeriodId")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("PeriodEndTime");

                    b.Property<TimeSpan>("PeriodStartTime");

                    b.HasKey("PeriodId");

                    b.ToTable("Periods");

                    b.HasData(
                        new
                        {
                            PeriodId = 1,
                            PeriodEndTime = new TimeSpan(0, 10, 30, 0, 0),
                            PeriodStartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            PeriodId = 2,
                            PeriodEndTime = new TimeSpan(0, 12, 30, 0, 0),
                            PeriodStartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            PeriodId = 3,
                            PeriodEndTime = new TimeSpan(0, 15, 0, 0, 0),
                            PeriodStartTime = new TimeSpan(0, 13, 30, 0, 0)
                        },
                        new
                        {
                            PeriodId = 4,
                            PeriodEndTime = new TimeSpan(0, 17, 0, 0, 0),
                            PeriodStartTime = new TimeSpan(0, 15, 30, 0, 0)
                        },
                        new
                        {
                            PeriodId = 5,
                            PeriodEndTime = new TimeSpan(0, 19, 0, 0, 0),
                            PeriodStartTime = new TimeSpan(0, 17, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NFCSystem.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NFCSystem.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NFCSystem.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NFCSystem.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NFCSystem.Models.Device", b =>
                {
                    b.HasOne("NFCSystem.Models.Timetable.Classroom", "Classroom")
                        .WithMany("Devices")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
